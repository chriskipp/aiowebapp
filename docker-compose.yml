version: '3.3'

networks:
  aio:
    ipam:
      config:
        - subnet: 10.18.0.0/24

services:
  aiowebapp:
    build: app
    restart: always
    networks:
      - aio
    ports:
      - "8080:8080"
    volumes:
      - ./app/app:/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    build:
      context: postgres
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - aio
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/pgdata:/var/lib/postgresql/data/pgdata
      - ./data/postgres/dump:/dump
      - ./postgres/conf:/etc/postgres
#      - ./postgres/server.crt:/var/lib/postgresql/server.crt
#      - ./postgres/server.key:/var/lib/postgresql/server.key


    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: postgres -c config_file=/etc/postgres/postgresql.conf

  redis:
    build: redis
    restart: always
    networks:
      - aio
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data


  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - 80:80
      - 443:443
    networks:
      - aio
    volumes:
      - ./app/app/static:/usr/share/nginx/html/static
      - ./app/app/storage:/usr/share/nginx/html/storage
    depends_on:
      - aiowebapp

